#include<bits/stdc++.h>
typedef long long ll;
typedef unsigned long long ull;
using namespace std;
const int maxn = 1e6 + 10;
const int mod = 0;
const int inf = 0x3f3f3f3f;
#define MAX 100
#define MAXCOST 0x7fffffff


/*
在第一个循环中，
*/ 
int graph[MAX][MAX];//记录各点之间的距离 
 
int prim(int graph[][MAX], int n)
{
	int lowcost[MAX];
	int mst[MAX];
	int i, j, min, minid, sum = 0;
	for (i = 2; i <= n; i++)//先将最原始的各点之间的距离保存 
	{
		lowcost[i] = graph[1][i];//表示以i为终点的边的最小权值
		mst[i] = 1;//表示对应lowcost[i]的起点,默认起点都是1 
	}
	mst[1] = 0;
	for (i = 2; i <= n; i++)
	{
		min = MAXCOST;
		minid = 0;
		for (j = 2; j <= n; j++)
		{
			if (lowcost[j] < min && lowcost[j] != 0)//找到与原始起点最小点之后，把其余各点的mst更新为新的起点 
			{
				min = lowcost[j]; 
				minid = j;
			}
		}
		cout << "V" << mst[minid] << "-V" << minid << "=" << min << endl;//打印起点到最小距离点的位置距离 
		sum += min;
		lowcost[minid] = 0;
		for (j = 2; j <= n; j++)//利用最新的最小点，更新距离 
		{
			if (graph[minid][j] < lowcost[j])
			{
				lowcost[j] = graph[minid][j];
				mst[j] = minid;
			}
		}
	}
	return sum;
}
 
int main()
{
	int i, j, k, m, n;
	int x, y, cost;
	ifstream in("input.txt");
	in >> m >> n;//m=顶点的个数，n=边的个数
	//初始化图G
	for (i = 1; i <= m; i++)
	{
		for (j = 1; j <= m; j++)
		{
			graph[i][j] = MAXCOST;
		}
	}
	//构建图G
	for (k = 1; k <= n; k++)
	{
		in >> i >> j >> cost;
		graph[i][j] = cost;
		graph[j][i] = cost;
	}
	//求解最小生成树
	cost = prim(graph, m);
	//输出最小权值和
	cout << "最小权值和=" << cost << endl;
	system("pause");
	return 0;
}
