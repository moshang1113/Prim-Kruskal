#include<bits/stdc++.h>
typedef long long ll;
typedef unsigned long long ull;
using namespace std;
const int maxn = 1e6 + 10;
const int mod = 0;
const int inf = 0x3f3f3f3f;

typedef struct road *Road;
typedef struct road
{
	int a , b;
	int w;
}road;
 
typedef struct graph *Graph;
typedef struct graph
{
	int e , n;
	Road data;
}graph;
 
Graph initGraph(int m , int n)
{
	Graph g = (Graph)malloc(sizeof(graph));
	g->n = m;
	g->e = n;
	g->data = (Road)malloc(sizeof(road) * (g->e));
	return g;
}
 
void create(Graph g)
{
	int i;
	for(i = 1 ; i <= g->e ; i++)
	{
		int x , y, w;
		scanf("%d %d %d",&x,&y,&w);
		if(x < y)
		{
			g->data[i].a = x;
			g->data[i].b = y;
		}
		else
		{
			g->data[i].a = y;
			g->data[i].b = x;
		}
		g->data[i].w = w;
	}
}
/*寻找某一个点在并查集中的根，所以，判断的条件为如果某一个下标的值就是其本身，
设a为并查集数组，v为数组值，如果a[v] = v，它就是根，否则就让v = a[v]，向上寻找，直到其相等*/
int getRoot(int v[], int x)
{
	while(v[x] != x)
	{
		x = v[x];
	}
	return x;
}
 
int Kruskal(Graph g)//g为结构体，包含了两条边和它们之间的权值 
{
	int sum = 0;
	int v[10010];
	for(int i = 1 ; i <= g->n ; i++)//g->e为一共有几个点 
		v[i] = i;
	sort(g->data , g->e);//对已经记录的各点之间距离进行排序 ，g->e为一共有几条边 
	for(int i = 1 ; i <= g->e ; i++)
	{
		int a , b;
		a = getRoot(v,g->data[i].a);//对不同边的大小进行更新 
		b = getRoot(v,g->data[i].b);
		if(a != b)//把更新之后的最小边的权值加入sum 
		{
			v[a] = b;
			sum += g->data[i].w;
		}
	}
	return sum;
}
 
int main()
{
	int m , n , id = 1;
	while(scanf("%d %d",&m,&n) != EOF)
	{
		int r , i;
		Graph g = initGraph(m,n);
		create(g);
		r = Kruskal(g);
		printf("Case %d:%d\n",id++,r);
		free(g);
	}
	return 0;
}



